Parsetree

 id  node
---------
 77  (program:) e1 -> [  78] :
 78    (unit:) e0 -> [   6], e1 -> [  79] :
  6      (function declaration:printdouble) e0 -> [   5], e1 -> [   4] @   1:  7:extern fun void printdouble(double d)
  5        (return type:void)  @   1:  7:extern fun void printdouble(double d)
  4        (plist:) e1 -> [   3] :
  3          (parameter:d) e0 -> [   2] @   1: 35:extern fun void printdouble(double d)
  2            (ptype:double)  @   1: 28:extern fun void printdouble(double d)
 79      (unit:) e0 -> [  12], e1 -> [  80] :
 12        (function declaration:printstring) e0 -> [  11], e1 -> [  10] @   2:  7:extern fun void printstring(str s)
 11          (return type:void)  @   2:  7:extern fun void printstring(str s)
 10          (plist:) e1 -> [   9] :
  9            (parameter:s) e0 -> [   8] @   2: 32:extern fun void printstring(str s)
  8              (ptype:str)  @   2: 28:extern fun void printstring(str s)
 80        (unit:) e0 -> [  18], e1 -> [  81] :
 18          (function declaration:print_matrix) e0 -> [  17], e1 -> [  16] @   3:  7:extern fun void print_matrix(mat m)
 17            (return type:void)  @   3:  7:extern fun void print_matrix(mat m)
 16            (plist:) e1 -> [  15] :
 15              (parameter:m) e0 -> [  14] @   3: 33:extern fun void print_matrix(mat m)
 14                (ptype:mat)  @   3: 29:extern fun void print_matrix(mat m)
 81          (unit:) e0 -> [  35], e1 -> [  82] :
 35            (vardeclist:var) e0 -> [  19], e1 -> [  34] @   6: 21:mat m = [[1,2],[3,4]]
 19              (ptype:mat)  @   6:  0:mat m = [[1,2],[3,4]]
 34              (vardecls:) e0 -> [  33] :
 33                (vardecl:m) e0 -> [  32] @   6:  4:mat m = [[1,2],[3,4]]
 32                  (matrixliteral:) e0 -> [  31] @   6:  8:mat m = [[1,2],[3,4]]
 31                    (elist:) e0 -> [  24], e1 -> [  30] @   6: 14:mat m = [[1,2],[3,4]]
 24                      (matrixliteral:) e0 -> [  23] @   6:  9:mat m = [[1,2],[3,4]]
 23                        (elist:) e0 -> [  20], e1 -> [  22] @   6: 11:mat m = [[1,2],[3,4]]
 20                          (number:1.0)  @   6: 10:mat m = [[1,2],[3,4]]
 22                          (elist:) e0 -> [  21] :
 21                            (number:2.0)  @   6: 12:mat m = [[1,2],[3,4]]
 30                      (elist:) e0 -> [  29] :
 29                        (matrixliteral:) e0 -> [  28] @   6: 15:mat m = [[1,2],[3,4]]
 28                          (elist:) e0 -> [  25], e1 -> [  27] @   6: 17:mat m = [[1,2],[3,4]]
 25                            (number:3.0)  @   6: 16:mat m = [[1,2],[3,4]]
 27                            (elist:) e0 -> [  26] :
 26                              (number:4.0)  @   6: 18:mat m = [[1,2],[3,4]]
 82            (unit:) e0 -> [  41], e1 -> [  83] :
 41              (function call:print_matrix) e0 -> [  40] @   8: 12:print_matrix(m[0])
 40                (alist:) e1 -> [  39] :
 39                  (indexed name:m) e0 -> [  38] @   8: 13:print_matrix(m[0])
 38                    (indexlist:) e0 -> [  37] @   8: 14:print_matrix(m[0])
 37                      (slice:index) e0 -> [  36] :
 36                        (number:)  @   8: 15:print_matrix(m[0])
 83              (unit:) e0 -> [  50], e1 -> [  84] :
 50                (function call:print_matrix) e0 -> [  49] @  10: 12:print_matrix(m[0][1])
 49                  (alist:) e1 -> [  48] :
 48                    (indexed name:m) e0 -> [  47] @  10: 13:print_matrix(m[0][1])
 47                      (indexlist:) e0 -> [  43], e1 -> [  46] @  10: 14:print_matrix(m[0][1])
 43                        (slice:index) e0 -> [  42] :
 42                          (number:)  @  10: 15:print_matrix(m[0][1])
 46                        (indexlist:) e0 -> [  45] @  10: 17:print_matrix(m[0][1])
 45                          (slice:index) e0 -> [  44] :
 44                            (number:1.0)  @  10: 18:print_matrix(m[0][1])
 84                (unit:) e0 -> [  61], e1 -> [  85] :
 61                  (assignment:) e0 -> [  57], e1 -> [  60] @  12:  8:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 57                    (indexed name:m) e0 -> [  56] @  12:  0:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 56                      (indexlist:) e0 -> [  52], e1 -> [  55] @  12:  1:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 52                        (slice:index) e0 -> [  51] :
 51                          (number:1.0)  @  12:  2:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 55                        (indexlist:) e0 -> [  54] @  12:  4:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 54                          (slice:index) e0 -> [  53] :
 53                            (number:1.0)  @  12:  5:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 60                    (matrixliteral:) e0 -> [  59] @  12: 10:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 59                      (elist:) e0 -> [  58] :
 58                        (number:3.14)  @  12: 11:m[1][1] = [3.14] // a matrix literal of 1 dimension with length 1
 85                  (unit:) e0 -> [  64], e1 -> [  86] :
 64                    (function call:print_matrix) e0 -> [  63] @  14: 12:print_matrix(m)
 63                      (alist:) e1 -> [  62] :
 62                        (name:m)  @  14: 13:print_matrix(m)
 86                    (unit:) e0 -> [  73], e1 -> [  87] :
 73                      (assignment:) e0 -> [  68], e1 -> [  72] @  16:  5:m[0] = m[1]
 68                        (indexed name:m) e0 -> [  67] @  16:  0:m[0] = m[1]
 67                          (indexlist:) e0 -> [  66] @  16:  1:m[0] = m[1]
 66                            (slice:index) e0 -> [  65] :
 65                              (number:)  @  16:  2:m[0] = m[1]
 72                        (indexed name:m) e0 -> [  71] @  16:  7:m[0] = m[1]
 71                          (indexlist:) e0 -> [  70] @  16:  8:m[0] = m[1]
 70                            (slice:index) e0 -> [  69] :
 69                              (number:1.0)  @  16:  9:m[0] = m[1]
 87                      (unit:) e0 -> [  76] :
 76                        (function call:print_matrix) e0 -> [  75] @  18: 12:print_matrix(m)
 75                          (alist:) e1 -> [  74] :
 74                            (name:m)  @  18: 13:print_matrix(m)

